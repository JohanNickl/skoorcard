@page "/"
@using SkoorCard.Services
@using System.Linq
@using static SkoorCard.Services.Tee

@inject ICourseDataService courseDataService
@inject ICardService cardService
@inject NavigationManager navigationManager

@if (card != null) {
	<div class="scorecard-container">
		<div class="grid-container grid-container-course" style="float:left;" >
			<div class="item course-name">@card.CourseData.Name</div>
			<div class="item">Hål</div>
			<div class="item">Par</div>
			<div class="item">Index</div>
			<div class="item">Gul</div>
			<div class="item">Röd</div>

			@foreach(var hole in card.CourseData.Holes) {
				<div class="item">@hole.Number</div>
				<div class="item">@hole.Par</div>
				<div class="item">@hole.Index</div>
				<div class="item">@hole.DistanceY</div>
				<div class="item">@hole.DistanceR</div>
				@if (hole.Number == 9) {
					<div class="item _out">UT</div>
					<div class="item _out">@card.CourseData.ParFirst9</div>
					<div class="item _out">@(card.CourseData.Holes.Where(x => x.Number <= 9).Sum(x => (double)x.Index)/(double)9.0) </div>
					<div class="item _out">@card.CourseData.DistanceYellowFirst9</div>
					<div class="item _out">@card.CourseData.DistanceRedFirst9</div>
				}
			}
			<div class="item _in">IN</div>
			<div class="item _in">@card.CourseData.ParLast9</div>
			<div class="item _in">@(card.CourseData.Holes.Where(x => x.Number > 9).Sum(x => (double)x.Index)/(double)9.0) </div>
			<div class="item _in">@card.CourseData.DistanceYellowLast9</div>
			<div class="item _in">@card.CourseData.DistanceRedLast9</div>
			<div class="item _out">UT</div>
			<div class="item _out">@card.CourseData.ParFirst9</div>
			<div class="item _out">@(card.CourseData.Holes.Where(x => x.Number <= 9).Sum(x => (double)x.Index)/(double)9.0) </div>
			<div class="item _out">@card.CourseData.DistanceYellowFirst9</div>
			<div class="item _out">@card.CourseData.DistanceRedFirst9</div>
			<div class="item total">TOT</div>
			<div class="item total">@card.CourseData.Par</div>
			<div class="item total">@(card.CourseData.Holes.Sum(x => (double)x.Index)/(double)9.0) </div>
			<div class="item total">@card.CourseData.DistanceYellow</div>
			<div class="item total">@card.CourseData.DistanceRed</div>
		</div>
		@if (card.PlayerScores != null) {
			<div class="player-container">
				@foreach(var playerScore in card.PlayerScores) {
					<div class="grid-container grid-container-player">
						<div class="item-special player-name" @onclick="@(e => registerScore(playerScore.PlayerId))">
							<div class="bottom-left">@playerScore.RoundHandicapAsString</div>
							<div class="item-padding">
								@cardService.GetPlayer(playerScore.PlayerId).Name
							</div>
							
						</div>
						<div class="item">Slag</div>
						<div class="item">Poäng</div>
						@foreach(var h in card.CourseData.Holes) {
							<div class="item-special item-strokes">
								<div class="bottom-left">
									@cardService.CalculateExtraStrokes(playerScore.RoundHandicap.Value, h.Index)
								</div>
								<div class="item-padding">
									@(playerScore.HoleScores.SingleOrDefault(x => x.HoleNumber == h.Number)?.ScoreAsString)
								</div>
							</div>

							<div class="item item-points">
									@(playerScore.HoleScores.SingleOrDefault(x => x.HoleNumber == h.Number)?.PointsAsString)
							</div>
							@if (h.Number == 9) {
								<div class="item _out">@playerScore.ScoreOut</div>
								<div class="item _out">@playerScore.PointsOut</div>
							}
						}
						<div class="item _in">@playerScore.ScoreIn</div>
						<div class="item _in">@playerScore.PointsIn</div>
						<div class="item _out">@playerScore.ScoreOut</div>
						<div class="item _out">@playerScore.PointsOut</div>
						<div class="item total">@playerScore.Score</div>
						<div class="item total">@playerScore.Points</div>
					</div>
					
				}
			</div>
		}
		<div class="nav-bottom">
			<a href="#">Add player</a>
			<a href="#">Exit</a>
		</div>
	</div>

} else {
	<div>Could not find course data</div>
}

@if (ShowDlg) {
	<DlgRegisterScore OnCancelCallback="OnCancelCallback"
					  OnSaveCallback="OnSaveCallback"
					  Player="selectedPlayer"
					  Model="selectedScore"
					  CourseData="courseData"
					  PlayerScore="selectedPlayerScore" />
}


@code {
	CourseData courseData;
	Card card;

	bool ShowDlg = false;

	private Player selectedPlayer = null;
	private PlayerHoleScore selectedScore = null;
	private PlayerScore selectedPlayerScore = null;

    protected override async Task OnInitializedAsync()
    {
        courseData = await courseDataService.GetByCourseIdAsync(null);
		card = await cardService.CreateAsync(courseData);
		var p1 = new Player() {
			Name = "Johan",
			Handicap = 11.7
		};

		var p2 = new Player() {
			Name = "Gustav",
			Handicap = 47.7
		};

		var p3 = new Player() {
			Name = "Johan 2",
			Handicap = 11.7
		};

		var p4 = new Player() {
			Name = "Gustav 2",
			Handicap = 47.7
		};
		/*
		cardService.AddPlayer(card, p1, TeeType.Yellow);
		cardService.AddPlayer(card, p2, TeeType.Red);
		cardService.AddPlayer(card, p3, TeeType.Yellow);
		cardService.AddPlayer(card, p4, TeeType.Red);
		*/
    }

	private void registerScore(string playerId) {
		selectedPlayer = cardService.GetPlayer(playerId);
		selectedPlayerScore = card.PlayerScores.SingleOrDefault(x => x.PlayerId.Equals(playerId));

		selectedScore = new PlayerHoleScore() {
			PlayerId = playerId,
			HoleNumber = cardService.LastPlayedHole(playerId) +1
		};
		ShowDlg = true;
	}

    private void OnCancelCallback() {
     	ShowDlg = false;
    }

	private void OnSaveCallback(PlayerHoleScore score) {
		cardService.AddScore(card, score);
		ShowDlg = false;
	}

}