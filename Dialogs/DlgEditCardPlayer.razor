
<div class="modal" tabindex="-1" role="dialog" style="display:block;">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header Success">
        <h5 class="modal-title">Edit</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="OnCancelCallback">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body">
        @if (Model != null) {
            <EditForm Model="@Model">
                <div class="form-group row">
                    <div class="form-group">
                        <label for="Name">Name</label>
                        <InputText id="Name" readonly @bind-Value="Model.Player.Name" />
                    </div>
                </div>

                <div class="form-group row">
                    <div class="form-group">
                        <label for="RoundHandicap">Round handicap</label>
                        <InputNumber id="RoundHandicap" @bind-Value="Model.RoundHandicap" />
                    </div>
                </div>

                <div class="form-group row">
                    <div class="form-group">
                        <label for="Tee">Tee</label>
                        <div class="btn-group" role="group" aria-label="Tee types">
                          @foreach(var value in Enum.GetValues(typeof(Tee.TeeType))) {
                            <InputRadioComponent SelectedValue="@((Tee.TeeType)value)" @bind-Value="Model.TeeType" TValue="Tee.TeeType" />
                          }
                        </div>
                    </div>
                </div>
            </EditForm>
        }


      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-primary" @onclick="OnSelect">Ok</button>
        <button type="button" class="btn btn-secondary" @onclick="OnCancelCallback" data-dismiss="modal">Close</button>
      </div>
    </div>
  </div>
</div>

@code {

    [Parameter]
    public EventCallback<CardPlayer> OnSelectCallback { get; set; }

    [Parameter]
    public EventCallback OnCancelCallback { get; set; }

    [Parameter]
    public CardPlayer Model {get; set;}

    protected override void OnInitialized() {
    }

    private void OnSelect() {
      OnSelectCallback.InvokeAsync(Model);
    }


}
